{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeHttpTransport = void 0;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar url = require(\"url\");\nvar grpc_web_1 = require(\"@improbable-eng/grpc-web\");\nfunction NodeHttpTransport() {\n  return function (opts) {\n    return new NodeHttp(opts);\n  };\n}\nexports.NodeHttpTransport = NodeHttpTransport;\nvar NodeHttp = function () {\n  function NodeHttp(transportOptions) {\n    this.options = transportOptions;\n  }\n  NodeHttp.prototype.sendMessage = function (msgBytes) {\n    if (!this.options.methodDefinition.requestStream && !this.options.methodDefinition.responseStream) {\n      this.request.setHeader(\"Content-Length\", msgBytes.byteLength);\n    }\n    this.request.write(toBuffer(msgBytes));\n    this.request.end();\n  };\n  NodeHttp.prototype.finishSend = function () {};\n  NodeHttp.prototype.responseCallback = function (response) {\n    var _this = this;\n    this.options.debug && console.log(\"NodeHttp.response\", response.statusCode);\n    var headers = filterHeadersForUndefined(response.headers);\n    this.options.onHeaders(new grpc_web_1.grpc.Metadata(headers), response.statusCode);\n    response.on(\"data\", function (chunk) {\n      _this.options.debug && console.log(\"NodeHttp.data\", chunk);\n      _this.options.onChunk(toArrayBuffer(chunk));\n    });\n    response.on(\"end\", function () {\n      _this.options.debug && console.log(\"NodeHttp.end\");\n      _this.options.onEnd();\n    });\n  };\n  ;\n  NodeHttp.prototype.start = function (metadata) {\n    var _this = this;\n    var headers = {};\n    metadata.forEach(function (key, values) {\n      headers[key] = values.join(\", \");\n    });\n    var parsedUrl = url.parse(this.options.url);\n    var httpOptions = {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port ? parseInt(parsedUrl.port) : undefined,\n      path: parsedUrl.path,\n      headers: headers,\n      method: \"POST\"\n    };\n    if (parsedUrl.protocol === \"https:\") {\n      this.request = https.request(httpOptions, this.responseCallback.bind(this));\n    } else {\n      this.request = http.request(httpOptions, this.responseCallback.bind(this));\n    }\n    this.request.on(\"error\", function (err) {\n      _this.options.debug && console.log(\"NodeHttp.error\", err);\n      _this.options.onEnd(err);\n    });\n  };\n  NodeHttp.prototype.cancel = function () {\n    this.options.debug && console.log(\"NodeHttp.abort\");\n    this.request.abort();\n  };\n  return NodeHttp;\n}();\nfunction filterHeadersForUndefined(headers) {\n  var filteredHeaders = {};\n  for (var key in headers) {\n    var value = headers[key];\n    if (headers.hasOwnProperty(key)) {\n      if (value !== undefined) {\n        filteredHeaders[key] = value;\n      }\n    }\n  }\n  return filteredHeaders;\n}\nfunction toArrayBuffer(buf) {\n  var view = new Uint8Array(buf.length);\n  for (var i = 0; i < buf.length; i++) {\n    view[i] = buf[i];\n  }\n  return view;\n}\nfunction toBuffer(ab) {\n  var buf = Buffer.alloc(ab.byteLength);\n  for (var i = 0; i < buf.length; i++) {\n    buf[i] = ab[i];\n  }\n  return buf;\n}","map":{"version":3,"mappings":"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","names":["NodeHttpTransport","opts","NodeHttp","exports","transportOptions","options","msgBytes","methodDefinition","requestStream","responseStream","request","setHeader","byteLength","write","toBuffer","end","response","debug","console","log","statusCode","headers","filterHeadersForUndefined","onHeaders","grpc_web_1","Metadata","on","_this","chunk","onChunk","toArrayBuffer","onEnd","metadata","forEach","key","values","join","parsedUrl","url","parse","httpOptions","host","hostname","port","parseInt","undefined","path","method","protocol","https","responseCallback","bind","http","err","abort","filteredHeaders","value","hasOwnProperty","buf","view","Uint8Array","length","i","ab","Buffer","alloc"],"sources":["/Users/mast/Projects/CabalLabs2022/ai-nft-minter/node_modules/@improbable-eng/grpc-web-node-http-transport/src/index.ts"],"sourcesContent":["import * as http from \"http\";\nimport * as https from \"https\";\nimport * as url from \"url\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\n\nexport function NodeHttpTransport(): grpc.TransportFactory {\n  return (opts: grpc.TransportOptions) => {\n    return new NodeHttp(opts);\n  };\n}\n\nclass NodeHttp implements grpc.Transport {\n  options: grpc.TransportOptions;\n  request: http.ClientRequest;\n\n  constructor(transportOptions: grpc.TransportOptions) {\n    this.options = transportOptions;\n  }\n\n  sendMessage(msgBytes: Uint8Array) {\n    if (!this.options.methodDefinition.requestStream  && !this.options.methodDefinition.responseStream) {\n        // Disable chunked encoding if we are not using streams\n        this.request.setHeader(\"Content-Length\", msgBytes.byteLength);\n    }\n    this.request.write(toBuffer(msgBytes));\n    this.request.end();\n  }\n\n  finishSend() {\n\n  }\n\n  responseCallback(response: http.IncomingMessage) {\n    this.options.debug && console.log(\"NodeHttp.response\", response.statusCode);\n    const headers = filterHeadersForUndefined(response.headers);\n    this.options.onHeaders(new grpc.Metadata(headers), response.statusCode!);\n\n    response.on(\"data\", chunk => {\n      this.options.debug && console.log(\"NodeHttp.data\", chunk);\n      this.options.onChunk(toArrayBuffer(chunk as Buffer));\n    });\n\n    response.on(\"end\", () => {\n      this.options.debug && console.log(\"NodeHttp.end\");\n      this.options.onEnd();\n    });\n  };\n\n  start(metadata: grpc.Metadata) {\n    const headers: { [key: string]: string } = {};\n    metadata.forEach((key, values) => {\n      headers[key] = values.join(\", \");\n    });\n    const parsedUrl = url.parse(this.options.url);\n\n    const httpOptions = {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port ? parseInt(parsedUrl.port) : undefined,\n      path: parsedUrl.path,\n      headers: headers,\n      method: \"POST\"\n    };\n    if (parsedUrl.protocol === \"https:\") {\n      this.request = https.request(httpOptions, this.responseCallback.bind(this));\n    } else {\n      this.request = http.request(httpOptions, this.responseCallback.bind(this));\n    }\n    this.request.on(\"error\", err => {\n      this.options.debug && console.log(\"NodeHttp.error\", err);\n      this.options.onEnd(err);\n    });\n  }\n\n  cancel() {\n    this.options.debug && console.log(\"NodeHttp.abort\");\n    this.request.abort();\n  }\n}\n\nfunction filterHeadersForUndefined(headers: {[key: string]: string | string[] | undefined}): {[key: string]: string | string[]} {\n  const filteredHeaders: {[key: string]: string | string[]} = {};\n\n  for (let key in headers) {\n    const value = headers[key];\n    if (headers.hasOwnProperty(key)) {\n      if (value !== undefined) {\n        filteredHeaders[key] = value;\n      }\n    }\n  }\n\n  return filteredHeaders;\n}\n\nfunction toArrayBuffer(buf: Buffer): Uint8Array {\n  const view = new Uint8Array(buf.length);\n  for (let i = 0; i < buf.length; i++) {\n    view[i] = buf[i];\n  }\n  return view;\n}\n\nfunction toBuffer(ab: Uint8Array): Buffer {\n  const buf = Buffer.alloc(ab.byteLength);\n  for (let i = 0; i < buf.length; i++) {\n    buf[i] = ab[i];\n  }\n  return buf;\n}\n"]},"metadata":{},"sourceType":"script"}